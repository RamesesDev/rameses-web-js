import com.rameses.annotations.*;

class SessionService {
	
    @PersistenceContext("main")
    def em;
    
    @ProxyMethod
    public def login( def o ) {
      try {
		def login = em.sqlContext.createQuery('select * from login where username=$P{username}').setParameters(o).singleResult;
		if(!login) {
			throw new Exception("Invalid username and password");
		}
        if(login.password != o.password) {
            throw new Exception("Invalid username and password");
		}
		//retrieve the associated entity for this login
		if( !login.usertype ) login.usertype = 'user';
		
		def profile = em.read( login.usertype, [objid: login.userid] );
		if(!profile) profile = [:];
		//test first adding the roles.
		profile.sessionid = ("SESSION" + new java.rmi.server.UID()).hashCode();
		profile.username = login.username;	
		profile.usertype = login.usertype;
		profile.roles = [
			[objid:"A123456", role:"faculty", groupcode:"IT101", rolename:"Faculty", groupname:"IT DEPARTMENT"],
			[objid:"A123457", role:"staff",  groupcode:"ACCT", rolename:"Administrative Staff", groupname:"ACCOUNTING"],
		].each{ it.title = it.rolename + "-" + it.groupname };
		//set permissions per role
		profile.permissions = [
            "A123456": [  "role.viewList", "user.viewList", "room.viewList" ],
            "A123457": [ "curriculum.viewList"  ]
		]
        return em.create( "usersession", profile );
      }
      catch(e) {
      	e.printStackTrace();
      	throw e;
      }
    }     

    @ProxyMethod
    public def getUserProfile( String sessionid ) {
		def u = em.read("usersession", [sessionid: sessionid] );
		if(!u)
			return null;
		def p = [:]
		p.username = u.username;
		p.usertype = u.usertype;
		p.roles = u.roles;
		p.permissions = u.permissions;
		return p;
    }

	@ProxyMethod
    public def logout(o) {
    	print "logging out " + o;
    	em.delete( "usersession", o );
    }
}
